{"version":3,"sources":["components/Header.js","components/GOL/GolInput.js","components/GOL/GolBoard.js","components/GOL/GolChat/ChatHistory.js","components/GOL/GolChat/ChatInput.js","api/index.js","components/GOL/GolAppPanel.js","App.js","serviceWorker.js","index.js"],"names":["Header","style","backgroundColor","padding","color","GolInput","props","console","log","handleClick","e","pClick","msgType","target","id","X","Y","playerColor","myColor","generation","playerID","payload","send","JSON","stringify","Row","display","flex","flexDirection","justifyContent","flexWrap","Button","variant","onClick","GolBoard","boardContainer","useRef","useEffect","boardData","current","grid","d3","append","attr","selectAll","data","enter","d","x","y","on","status","move","this","colorHex","exit","remove","height","width","className","ref","ChatHistory","messages","chatHistory","map","msg","index","key","overflowY","header","ChatInput","useState","input","setInput","onKeyDown","keyCode","pMsg","value","onChange","socket","WebSocket","connect","cb","onopen","onmessage","onclose","event","onerror","error","sendMsg","golMsgReducer","state","type","body","Object","assign","pending","messageHistory","chat","game","allHistory","initialMsgState","GolAppPanel","useReducer","dispatch","packet","parse","golMsgType","Container","Col","sm","length","board","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.782ad53a.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Header() {\n  return (\n    <div\n      style={{ backgroundColor: \"#15223b\", padding: \"10px\", color: \"white\" }}\n    >\n      GAME OF LIFE\n      <hr />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Button, Row } from \"react-bootstrap\";\nexport default function GolInput(props) {\n  console.log(props);\n  const handleClick = e => {\n    //dosomething\n    const pClick = {\n      msgType: e.target.id,\n      X: null,\n      Y: null,\n      playerColor: props.myColor,\n      generation: 99,\n      playerID: \"007\",\n      payload: e.target.id\n    };\n    console.log(\"sending\", pClick);\n    props.send(JSON.stringify(pClick));\n  };\n  return (\n    <div>\n      GOL OPTIONS\n      <br />\n      <Row\n        style={{\n          display: \"flex\",\n          flex: 1,\n          flexDirection: \"row\",\n          justifyContent: \"space-between\",\n          flexWrap: \"no-wrap\",\n          //margin: \"auto\",\n          padding: \"1rem\"\n        }}\n      >\n        <Button variant=\"primary\" id=\"PROPOGATE\" onClick={handleClick}>\n          PROPOGATE\n        </Button>\n        <Button variant=\"primary\" id=\"BLINKER\" onClick={handleClick}>\n          BLINKER\n        </Button>\n        <Button variant=\"primary\" id=\"TOAD\" onClick={handleClick}>\n          TOAD\n        </Button>\n        <Button variant=\"primary\" id=\"BEACON\" onClick={handleClick}>\n          BEACON\n        </Button>\n        <Button variant=\"primary\" id=\"ANNIHILATE\" onClick={handleClick}>\n          ANNIHILATE\n        </Button>\n      </Row>\n      <hr />\n    </div>\n  );\n}\n","import React, { useRef, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport * as d3 from \"d3\";\nexport default function GolBoard(props) {\n  //const refElement = useRef(null);\n  const boardContainer = useRef(null);\n  console.log(props);\n  //\n  //\n  //\n  const handleClick = (x, y) => {\n    console.log(\"clicked ->\");\n\n    console.log(\"clicked =>\", x, y, props.myColor);\n    const move = {\n      msgType: \"GOLMOVE\",\n      x,\n      y,\n      playerColor: props.myColor,\n      generation: 99,\n      playerID: \"007\",\n      //moveType: \"instill\",\n      //text: \"\",\n      payload: \"INSTILL\"\n    };\n    props.send(JSON.stringify(move));\n    // send click value to server here\n  };\n\n  ///////////////////////////////////////////\n  //\n  //\n  ////////////////////////////////////////////\n  useEffect(() => {\n    //console.log(boardContainer);\n    //console.log(\"----------------->\", props.gridData);\n    if (props.boardData && boardContainer.current) {\n      //console.log(\"==================>\", props.gridData);\n      //console.log(\"generating board\");\n      const grid = d3\n        .select(boardContainer.current)\n        //var grid = d3\n        // .select(\"#grid\")\n        .append(\"svg\")\n        .attr(\"width\", \"510px\")\n        .attr(\"height\", \"510px\");\n\n      var row = grid\n        .selectAll(\".row\")\n        .data(props.boardData)\n        .enter()\n        .append(\"g\")\n        .attr(\"class\", \"row\");\n\n      var column = row\n        .selectAll(\".square\")\n        .data(function(d) {\n          return d;\n        })\n        .enter()\n        .append(\"rect\")\n        .attr(\"class\", \"square\")\n        .attr(\"x\", function(d) {\n          return d.x * 50 + 1;\n        })\n        .attr(\"y\", function(d) {\n          return d.y * 50 + 1; //d.y;\n        })\n        .attr(\"width\", function(d) {\n          return 50; //d.width;\n        })\n        .attr(\"height\", function(d) {\n          return 50; //d.height;\n        })\n        .style(\"fill\", \"#fff\")\n        .style(\"stroke\", \"#222\")\n\n        .on(\"click\", function(d) {\n          d.status = true;\n\n          handleClick(d.x, d.y);\n          console.log(\"clicked\");\n          //          handleClick.bind(this, \"COORDS\");\n          //this.handleClick(\"COORDS\");\n          if (d.status === true) {\n            d3.select(this).style(\"fill\", \"#0000ff\");\n          }\n        });\n\n      column.style(\"fill\", function(d) {\n        if (d.colorHex) {\n          return d.colorHex;\n        } else return \"#fff\";\n      });\n\n      // grid.style(\"fill\", function(d) {\n      //   if (d.colorHex) {\n      //     return d.colorHex;\n      //   } else return \"#fff\";\n      // });\n\n      grid.exit().remove();\n    }\n    //}, [props.gridData, boardContainer.current]);\n  }, [props.boardData, boardContainer.current]);\n\n  ////////////////////////\n  ////////////////////////////////\n\n  return (\n    <div>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\"\n        }}\n      >\n        <svg\n          style={{ height: \"100vh\", width: \"100vw\" }}\n          className=\"board-component\"\n          ref={boardContainer}\n        />\n      </div>\n    </div>\n  );\n}\n\nGolBoard.propTypes = {\n  boardData: PropTypes.object.isRequired\n};\n","import React from \"react\";\n\nexport default function ChatHistory(props) {\n  const messages = props.chatHistory.map((msg, index) => {\n    //<Message message={msg.body} />\n    //console.log(msg);\n    return <li key={index}>{JSON.stringify(msg)}</li>;\n  });\n  return (\n    <div\n      className=\"ChatHistory\"\n      style={{ height: \"70vh\", overflowY: \"scroll\" }}\n    >\n      <h2>Chat History</h2>\n      <h3>{props.header}</h3>\n      <ul>{messages}</ul>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\n\nexport default function ChatInput(props) {\n  const [input, setInput] = useState(\"\");\n\n  const handleChange = e => {\n    setInput(e.target.value);\n  };\n  const send = e => {\n    //    console.log(\"hello\");\n    //   sendMsg(\"hello\");\n    if (e.keyCode === 13) {\n      const pMsg = {\n        msgType: \"GOLCHAT\",\n        X: \"\",\n        Y: \"\",\n        playerColor: props.myColor,\n        generation: 99,\n        playerID: \"007\",\n        payload: input\n      };\n      const message = {\n        msgType: \"GOLCHAT\",\n        //msgData: e.target.value\n        payload: input\n      };\n      //++sendMsg(JSON.stringify(message));\n      //sendMsg(e.target.value);\n      console.log(\"sending\", pMsg);\n      props.send(JSON.stringify(pMsg));\n      e.target.value = \"\";\n      console.log(\"clearing\");\n      setInput(\"\");\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"ChatInput\">\n        <input onKeyDown={send} onChange={handleChange} value={input} />\n      </div>\n    </div>\n  );\n}\n","var socket = new WebSocket(\"ws://localhost:8080/ws\");\n\nlet connect = cb => {\n  console.log(\"connecting\");\n\n  socket.onopen = () => {\n    console.log(\"Successfully Connected\");\n  };\n\n  socket.onmessage = msg => {\n    console.log(msg);\n    cb(msg);\n  };\n\n  socket.onclose = event => {\n    console.log(\"Socket Closed Connection: \", event);\n  };\n\n  socket.onerror = error => {\n    console.log(\"Socket Error: \", error);\n  };\n};\n\nlet sendMsg = msg => {\n  console.log(\"sending msg:: \", msg);\n  socket.send(msg);\n};\n\nexport { connect, sendMsg };\n","import React, { useEffect, useReducer } from \"react\";\nimport GolInput from \"./GolInput\";\nimport GolBoard from \"./GolBoard\";\nimport ChatHistory from \"./GolChat/ChatHistory\";\nimport ChatInput from \"./GolChat/ChatInput\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { connect, sendMsg } from \"../../api\";\n// dispatch([body.golMsgType, body]);\n//packet.body.payload.golMsgType\nfunction golMsgReducer(state, [type, body]) {\n  console.log(\"REDUCER\", type);\n  console.log(\"REDUCER-PAYLOAD\", body);\n  //let p = JSON.parse(payload.body);\n  //let p = { msgType: type };\n  //let p = payload;\n  switch (type) {\n    case \"playerColor\": {\n      return Object.assign({}, state, {\n        pending: state.pending,\n        playerColor: body,\n        messageHistory: {\n          chat: state.messageHistory.chat,\n          game: state.messageHistory.game,\n          allHistory: [...state.messageHistory.allHistory, body]\n        }\n      });\n    }\n    case \"chat\":\n      return Object.assign({}, state, {\n        pending: state.pending,\n        playerColor: state.playerColor,\n        messageHistory: {\n          chat: [...state.messageHistory.chat, body],\n          game: [...state.messageHistory.game],\n          allHistory: [...state.messageHistory.allHistory, body]\n        }\n      });\n    case \"GOLGAME\": {\n      //console.log(\"game--------------->\", p);\n      return Object.assign({}, state, {\n        pending: state.pending,\n        playerColor: state.playerColor,\n        messageHistory: {\n          chat: [...state.messageHistory.chat],\n          game: [...state.messageHistory.game, body],\n          allHistory: [...state.messageHistory.allHistory, body]\n        }\n      });\n    }\n    default:\n      return state;\n  }\n}\nconst initialMsgState = {\n  playerColor: \"\",\n  pending: 0,\n  messageHistory: { chat: [], game: [], allHistory: [] }\n};\n///////////////////////////////////////////////////////////////\n//\n//\n//\n///////////////////////////////////////////////////////////////\nexport default function GolAppPanel() {\n  const [state, dispatch] = useReducer(golMsgReducer, initialMsgState);\n  useEffect(() => {\n    connect(msg => {\n      console.log(\"New Message\");\n      console.log(\"received data:\", typeof msg.data, msg.data);\n      let packet = JSON.parse(msg.data);\n      console.log(\"packet ->\", packet.type, packet);\n\n      //body is an object\n      console.log(\"body ->\", typeof packet.body, packet.body);\n      console.log(\"body ->\", packet.body.golMsgType, packet.body.payload);\n\n      //\n      //\n      //let body = JSON.parse(packet.body);\n      //console.log(\"++++++++\", packet.body.golMsgType);\n\n      //      dispatch([packet.golMsgType, packet]);\n      dispatch([packet.body.golMsgType, packet.body.payload]);\n    });\n  }, []);\n\n  //  connect();\n  function send(data) {\n    console.log(\"sending...:\", data);\n    sendMsg(data);\n  }\n\n  //   <GolBoard\n  //   gameHistory={state.messageHistory.game}\n  //   myColor={state.playerColor}\n  // />\n  console.log(\"STATE\", state);\n  // {state.messageHistory.game.length >= 1 ? (\n  //   <GolBoard\n  //     gameHistory={state.messageHistory.game}\n  //     myColor={state.playerColor}\n  //   />\n  // ) : null}\n\n  return (\n    <div>\n      <Container>\n        <hr />\n        <Row>\n          <Col sm={7}>\n            <GolInput send={send} myColor={state.playerColor} />\n\n            {state.messageHistory.game.length >= 1 ? (\n              <GolBoard\n                boardData={\n                  state.messageHistory.game[\n                    state.messageHistory.game.length - 1\n                  ].board\n                }\n                myColor={state.playerColor}\n                send={send}\n              />\n            ) : null}\n          </Col>\n          <Col sm={5}>\n            <ChatHistory\n              chatHistory={state.messageHistory.chat}\n              header={\"Chat Only\"}\n            />\n            <ChatInput send={send} />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n","import React from \"react\";\n\n//import logo from \"./logo.svg\";\n//import \"./App.css\";\nimport Header from \"./components/Header\";\nimport GolAppPanel from \"./components/GOL/GolAppPanel\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <GolAppPanel />\n      <hr />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}